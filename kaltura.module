<?php
// $Id$

/**
 * @file
 * kaltura integration module - core functions
 * 
 */

/*
 * load kaltura stuff
 */
module_load_include('php', 'kaltura', 'kaltura_client');
module_load_include('php', 'kaltura', 'kaltura_logger');
module_load_include('php', 'kaltura', 'kaltura_settings');
module_load_include('php', 'kaltura', 'kaltura_helpers');
module_load_include('php', 'kaltura', 'kaltura_notification_client');

drupal_add_css(drupal_get_path("module", "kaltura") ."/kaltura.css");
drupal_add_js(drupal_get_path("module", "kaltura") ."/kaltura.js");
drupal_add_js(drupal_get_path("module", "kaltura") ."/swfobject.js");


/* 
 * Implementation of hook_perm().
 */
function kaltura_perm() {
  return array(
    'administer kaltura',
    'access kaltura widgets',
  );
}

/*
 * Implementation of hook_menu().
 */
function kaltura_menu() {
  $items = array();
  
  $items['admin/settings/kaltura'] = array(
    'title' => 'Kaltura',
    'file' => 'kaltura.admin.inc',
    'file path' => drupal_get_path('module', 'kaltura'),
    'description' => t('List of Kaltura administration pages.'),
    'page callback' => 'kaltura_settings_main',
    'access arguments' => array('administer kaltura'),
    'type' => MENU_NORMAL_ITEM
  );
  
  $items['admin/settings/kaltura/general'] = array(
    'title' => t('Server Integration Settings'),
    'file' => 'kaltura.admin.inc',
    'file path' => drupal_get_path('module', 'kaltura'),
    'description' => t('Kaltura\'s server integration settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kaltura_settings_form'),
    'access arguments' => array('administer kaltura'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
  );

  /*
  $items['admin/settings/kaltura/general/notifications'] = array(
    'title' => t('Kaltura Notification Settings'),
    'file' => 'kaltura.admin.inc',
    'file path' => drupal_get_path('module', 'kaltura'),
    'description' => t('Manage notifications settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kaltura_notifications_settings_form'),
    'access arguments' => array('administer kaltura'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -9,
  );

  $items['admin/settings/kaltura/widgets'] = array(
    'title' => t('Player Selection'),
    'file' => 'kaltura.admin.inc',
    'file path' => drupal_get_path('module', 'kaltura'),
    'description' => t('Select which player you want to see on your site'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kaltura_choose_player'),
    'access arguments' => array('administer kaltura'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -8,
  );
  */
  $items['admin/settings/kaltura/import'] = array(
    'title' => t('Importing Entries from Kaltura to Drupal'),
    'file' => 'kaltura.admin.inc',
    'file path' => drupal_get_path('module', 'kaltura'),
    'description' => t('import your partner\'s entries from kaltura\'s server to drupal, as nodes'),
    'page callback' => 'kaltura_import_entries',
    'access arguments' => array('administer kaltura'),
    'type' => MENU_CALLBACK,
    'weight' => 0,
  );
  $items['kaltura/notification_handler'] = array(
    'title' => 'Drupal Notification Handler',
    'file' => 'kaltura.notification.inc',
    'file path' => drupal_get_path('module', 'kaltura'),
    'page callback' => 'kaltura_notification_handler',
    'access callback' => 'access_allow_all',
    'type' => MENU_CALLBACK
  );

  $items['kaltura/contribution_wizard/%'] = array(
    'title' => 'Contribution Wizard',
    'page callback' => 'kaltura_contribution_wizard',
    'page arguments' => array( 2 ),
    'access arguments' => array( 'access kaltura widgets' ),
    'type' => MENU_CALLBACK
  );

  $items['kaltura/simple_editor'] = array(
    'title' => 'Simple Editor',
    'page callback' => 'kaltura_simple_editor',
    'access arguments' => array( 'access kaltura widgets' ),
    'type' => MENU_CALLBACK
  );

  $items['kaltura/insert_widget'] = array(
    'title' => 'Please Wait...',
    'page callback' => 'kaltura_insert_widget',
    'access callback' => 'access_allow_all',
    'access arguments' => array( TRUE ),
    'type' => MENU_CALLBACK
  );
  $items['kaltura/preview_player'] = array(
    'title' => 'player preview',
    'page callback' => 'kaltura_preview_player',
    'access callback' => 'access_allow_all',
    'type' => MENU_CALLBACK,
  );
  
  $items['kaltura/entries'] = array(
    'title' => 'List Of Entries',
    'page callback' => 'kaltura_list_entries',
    'access callback' => 'access_allow_all',
    'type' => MENU_CALLBACK
  );
  
  return $items;
}

/*
 * helper function to force access for everyone on a menu item
 */
function access_allow_all() {
  return TRUE;
}

function kaltura_preview_player($no_js = FALSE, $post_replacement = array()) {
  $args = func_get_args();
  if ($args[0] == 'type') $type = $args[1];
  $widgets = new KalturaSettings;
  $form_id = ($no_js === 1)? $post_replacement['form_id']: $_POST['form_id'];
  if ($form_id == 'kaltura_mix_settings_form') {
    $type = ($type)? $type: 'roughcut';
    $skin = ($no_js === 1)? $post_replacement['kaltura_mix_widget']: $_POST['kaltura_mix_widget'];
    $widget_id = '_'. variable_get('kaltura_partner_id', '') .'_'. $widgets->kdp_widgets[$type][$skin]['remix_uiconf'];
    $embed = fetch_widget_html($widget_id);
  }
  elseif ($form_id == 'kaltura_entry_settings_form') {
    if ($no_js === 1) $type = $post_replacement['type'];
    $skin = ($no_js === 1)? $post_replacement['kaltura_'. $type .'_entry_widget']: $_POST['kaltura_'. $type .'_entry_widget'];
    $widget_id = '_'. variable_get('kaltura_partner_id', '') .'_'. $widgets->kdp_widgets[$type][$skin]['view_uiconf'];
    $embed = fetch_widget_html($widget_id);
  }
  if ($no_js === 1) return $embed;
  print drupal_to_js(array('status' => TRUE, 'data' => $embed));
  exit();
}

/*
 * Implementation of hook_theme().
 */
function kaltura_theme() {
  $themes = array(
    'contribution_wizard' => array(
      'arguments' => array('themeParams' => NULL),
    ),
    'contribution_wizard_add' => array(
      'arguments' => array('themeParams' => NULL),
    ),
    'simple_editor' => array(
      'arguments' => array('element' => NULL),
    ),
    'kaltura_modal' => array(
      'arguments' => array('element' => NULL),
    ),
    'list_of_entries' => array(
      'arguments' => array('element' => NULL),
    ),
    'kaltura_server_status' => array(
      'arguments' => array('element' => NULL),
    ),
    'contribution_wizard_field' => array(
      'arguments' => array('themeParams' => NULL),
    ),
    'kaltura_maintenance_page' => array(
      'arguments' => array('text' => NULL),
    ),
  );
  
  return $themes;
}

/*
 * Implementation of module_invoke().
 *
 * used to call hooks exxposed by kaltura which other module implements
 */
function kaltura_invoke($hook, $data = NULL) {
  $hook = 'kaltura_'. $hook;
  foreach (module_implements($hook) as $module) {
    $function = $module .'_'. $hook;
    $result = ($function($data));

    if (is_array($result)) {
      $return = array_merge($return, $result);
    }
    else if (isset($result)) {
      $return[] = $result;
    }
  }
  return $return;
}

/*
 * Implementation of hook_search().
 */
function kaltura_search($op, $keys = NULL) {
  switch ($op) {
    case 'search':
      $query = kaltura_build_search();
      $results = db_query($query, $keys);
      while ($result = db_fetch_object($results)) {
        $kaltura_results[] = array(
          'link' => l($result->nid, 'node/'. $result->nid),
          'title' => $result->nid,
        );
      }
      return $kaltura_results;
      break;
      default:
  }
}

/*
 * helper function to build the search query on kaltura items
 *
 * thought to be more complicated query.
 * If we ever need to enhance the query, this is the place.
 */
function kaltura_build_search() {
  $q = 'SELECT nid FROM {node_kaltura} WHERE tags LIKE %\'%s\'% OR admin_tags LIKE %\'%s\'%';
  return $q;
}

/**
 * Implementation of hook_nodeapi().
 *
 * All we do here is to alter the body and teaser fields when a node goes to view mode
 * we call our functions to replcae the special "tags", which we create in theme_node_kaltura_*_entryId(), with the embed tag
 *
 */
function kaltura_nodeapi(&$node, $op, $teaser) {
  switch ($op) {
    case "load":
      break;
    case "view":
      break;
    case 'search result':
      $node->body = _kaltura_replace_tags($node->body, FALSE, TRUE);
      break;
    case "alter":
      $node->body = _kaltura_replace_tags($node->body);
      $node->teaser = _kaltura_replace_tags($node->teaser);
      break;
    default:
  }
}

/*
 * This function determines in which playedr widget we need to use
 *
 * The function exposes a hook "hook_use_widget" so other modules can change the widget if they wish to.
 *
 * The hook has higher priority over theme, so if a theme widget was specified and a hook returned a widget, the hook
 * wins and the theme widget is ignored
 */
function kaltura_use_uiconf($default_uicid, $node_type, $theme_uicid, $media_type = 'roughcut') {
  // invoke hook use_widget
  $new_uicid = kaltura_invoke('use_widget', array( $node_type, $media_type ));
  
  // if returned $wid from hooks, use it
  if ($new_uicid) return $new_uicid[0];
  
  // if no module implements the hook, and a theme widget was specified, return theme widget
  if ($theme_uicid) return $theme_uicid;
  
  // if no $wid from hooks or theme, check for widgets in settings, for specific type (entry, kshow, mix)
  $widgets = new KalturaSettings;
  if ($node_type == 'mix' || $node_type == 'roughcut') {
    $uiconf_type = (user_access('edit kaltura mixes'))? 'remix': 'view';
  }
  else {
    //$uiconf_type = (user_access('edit kaltura items'))? 'remix': 'view';
    $uiconf_type = 'view';
  }
  
  $default = _default_uiconf_by_type($media_type);
  $widget = variable_get('kaltura_'. $media_type .'_'. $node_type .'_widget', $default);

  if ($widgets->kdp_widgets[$media_type][$widget][$uiconf_type .'_uiconf'] != 'XXX')
    $ui_conf = $widgets->kdp_widgets[$media_type][$widget][$uiconf_type .'_uiconf'];
  if ($ui_conf) return $ui_conf;
  
  // if settings widget for specified type is XXX => not defined, use default
  return $default_uicid;
}

function _default_uiconf_by_type($media_type) {
  switch ($media_type) {
    case 'audio': $default = KalturaSettings::DEFAULT_AUDIO_PLAYER_UICONF; break;
    case 'video': $default = KalturaSettings::DEFAULT_VIDEO_PLAYER_UICONF; break;
    case 'roughcut': $default = KalturaSettings::DEFAULT_RC_PLAYER_UICONF; break;
    case 'comment': $default = KalturaSettings::DEFAULT_COMMENT_PLAYER_UICONF; break;
  }
  return $default;
}

/*
 * callback function for the kaltura/entries URL
 */
function kaltura_list_entries() {
  $get_all = 'SELECT nid,title,type FROM {node} WHERE type LIKE \'kaltura_%\' AND status > 0 ORDER BY nid DESC';
  $result = db_query($get_all);
  while ($node_nid = db_fetch_object($result)) {
    $nodes[$node_nid->nid] = array( 'title' => $node_nid->title, 'type' => $node_nid->type);
  }
  $html = theme("list_of_entries", $nodes);
  return $html;
}

/*
 * function to render the HTML for the kaltura/entries page
 */
function theme_list_of_entries($arr_nodes_nids) {
  $str = '<ul>';
  if (is_array($arr_nodes_nids) && count($arr_nodes_nids)) {
    foreach ($arr_nodes_nids as $nid => $dets) {
      $str .= '<li>'. l($dets['title'], 'node/'. $nid) .' ( '. $dets['type'] .' )</li>'. PHP_EOL;
    }
  }
  else {
    $str .= '<li>None</li>'. PHP_EOL;
  }
  $str .= '</ul>';
  
  return $str;
}

/*
 * helper function to add the result from a notification or API call to the entry_data field
 */
function _add_result_to_entry_data($eid, $result, $replace = TRUE) {
  if (!$replace) {
    $get_current_data = 'SELECT kaltura_entry_data FROM {node_kaltura} WHERE kaltura_entryId = \'%s\'';
    $row = db_query($get_current_data, $eid);
    $data = db_fetch_object($row);
    $real_data = unserialize($data->kaltura_entry_data);
  }
  $real_data[] = $result;
  $set_new_data = 'UPDATE {node_kaltura} SET kaltura_entry_data = \'%s\' WHERE kaltura_entryId = \'%s\'';
  $row = db_query($set_new_data, serialize($real_data), $eid);
}

/*
 * Implementation of hook_cron().
 */
function kaltura_cron() {
  // get all entries from node_kaltura table,
  // use the getEntries service to retrieve the data of entries
  $get_entries = 'SELECT kaltura_entryId FROM {node_kaltura} node_kaltura LEFT JOIN {node} node ON node.nid = node_kaltura.nid WHERE node.status = 1';
  $entries = db_query($get_entries);
  while ($entry = db_fetch_object($entries)) {
    $all_entries[] = $entry->kaltura_entryId;
  }
  if (is_array($all_entries) && count($all_entries)) {
    $my_entries = implode(',', $all_entries);
    $result = _get_entries($my_entries);
  }
  else {
    $result = FALSE;
  }
  // if we got a good result, we update the entry data in the DB 
  if ($result !== FALSE) {
    foreach ($result['entries'] as $key => $entry) {
      $update_entry = 'UPDATE {node_kaltura} SET kstatus = %d, kaltura_views = %d, kaltura_plays = %d, kaltura_rank = %d, kaltura_total_rank = %d,
        kaltura_duration = %d, kaltura_votes = %d, kaltura_thumbnail_url = \'%s\' WHERE kaltura_entryId = \'%s\'';
      if ($entry['duration']) $duration = $entry['duration'];
      else $duration = $entry['length_in_msecs'];
      $updated = db_query($update_entry, $entry['status'], $entry['views'], $entry['plays'], $entry['rank'], $entry['totalRank'], $duration,
      $entry['votes'], $entry['thumbnailUrl'], $entry['id']);
    }
  }
}

/*
 * helper function to call the getEntries service
 */
function _get_entries($entries) {
  $kaltura_client = KalturaHelpers::getKalturaClient();
  $session_user = KalturaHelpers::getSessionUser();
  $result = $kaltura_client->getEntries($session_user, $entries, ',', 1);
  if ($result['result']) return $result['result'];
  return FALSE;
}

/*
 * Implementation of hook_help().
 */
function kaltura_help($path, $arg) {
  switch ($path) {
    case 'admin/help#kaltura':
      return get_help_html('general');
  }
}

function get_help_html($page) {
  switch ($page) {
    case 'general':
      $filename = 'kaltura_general_help';
      break;
    case 'crossdomain':
      $filename = 'kaltura_cd_help';
      break;
  }
  $help_html = file_get_contents(drupal_get_path('module', 'kaltura') .'/kaltura_help/'. $filename .'.html');
  return $help_html;
}

function fetch_widget_html($widget_id) {
  $session_user = KalturaHelpers::getSessionUser();
  $kaltura_client = KalturaHelpers::getKalturaClient();  
  $result = $kaltura_client->getWidget($session_user, $widget_id, 1);
  $embbed = $result['result']['widget']['widgetHtml'];
  return $embbed;
}

/*
 * define the settings form for choosing a default player
 */
function kaltura_choose_player($as_single_form, $type, $node_type, $return_widget_html = FALSE) {
  global $base_path;
  if (variable_get('kaltura_partner_id', '') == '') {
    drupal_set_message(t('You must configure partner\'s details first.'), 'error');
    return $form;
  }
  if ($as_single_form) {
    $form['kaltura_widgets_information'] = array(
      '#value' => t('Select which player you want to use in default view for kaltura items'),
    );
  }
  $widgets = new KalturaSettings;
  $pid = variable_get('kaltura_partner_id', '');

  foreach ($widgets->kdp_widgets[$type] as $skins => $confs) {
    if ($return_widget_html)
      $embbed = fetch_widget_html('_'. $pid .'_'. $confs['remix_uiconf']);
    $options[$skins] = $skins .': '. (($return_widget_html)? $embbed: '<img src="'. $base_path . drupal_get_path('module', 'kaltura') .'/'. $confs['preview_image'] .'" />');
  }
  
  $default = _default_uiconf_by_type($type);
 
  $form['default_widget'] = array(
    '#title' => t('available widgets'),
    '#type' => 'radios',
    '#options' => $options,
    '#attributes' => array( "class" => "player-preview-option" ),
    '#default_value' => variable_get('kaltura_'. $type .'_'. $node_type .'_widget', $default),
  );
  if ($as_single_form)
    return system_settings_form($form);
  else
    return $form;
}

/*
 * function to choose to what URL the user will be redirected to after AddEntry in the CW
 *
 * This function exposes a hook_cw_destination()
 */
function kaltura_cw_destination() {
  $url = kaltura_invoke('cw_destination', $data = NULL);
  if ($url) return $url[0];
  
  $url = url('kaltura/entries');
  return $url;
}

/*
 * include another file with mostly theme'ing functions
 */
include('kaltura.themeing.inc');
